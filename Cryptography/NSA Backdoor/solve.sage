#given c and n in output.txt
y = 9034312227844061656466587847598501341910338346489231009909846328201787712359374585426547322531481617578847665481497176874188901886605485057912420323290380616266329264194334231469444451122698674591481527372178581054174599987464327438068147260122998875959309341471512682234755003991440548688188565585286711968467955773493097750660633130731510733960337494662217667957969003766014218221657112219189084575962726801339014377646712996049118898374000043991198131710723098408419191008833103502200191310365745614730122721608922359963405124208973965151489353452702866253115660818394825538770236141893226144862051043138143340783
n = 14483324164998830727350106459578136281421142392901935790818270363367628050798361664927792066842060749832364365333023032686382382564132334945237601638575714210102463084066296816279620506512366299684554318945808976775914097385607860910409731832485250185939883175766381786916687184958952483888568443929512509700019210285194440268832148315143158827005773576049380198608992445882415694438878459107497537454614909909011485928843204936315017229490124882262132670134141640920366437090547788271249965739450459347139680914197081512848507433340539880724546791075727146021353286656698248915604206715537172116688650173612506235853

#p and q, found using primefac on n
p = 99755582215898641407852705728849845011216465185285211890507480631690828127706976150193361900607547572612649004926900810814622928574610545242732025536653312012118816651110903126840980322976744546241025457578454651121668690556783678825279039346489911822502647155696586387159134782652895389723477462451243655239
q = 145188107204395996941237224511021728827449781357154531339825069878361330960402058326626961666006203200118414609080899168979077514608109257635499315648089844975963420428126473405468291778331429276352521506412236447510500004803301358005971579603665229996826267172950505836678077264366200199161972745420872759627 

#factorized p and q
p_factors = [2, 65497, 20611, 30971, 32987, 33107, 33151, 33289, 33457, 33679, 34123, 34897, 35023, 35671, 36151, 37049, 37139, 39313, 39541, 40087, 40237, 40787, 41257, 41333, 41351, 41999, 42083, 42239, 43177, 43627, 44789, 45179, 46381, 46619, 46861, 47111, 48883, 49157, 50359, 50527, 50773, 50777, 50857, 50951, 51307, 51361, 51383, 51593, 52889, 52967, 53047, 54037, 54673, 56479, 56569, 57301, 58963, 59651, 61027, 61441, 61507, 62347, 62929, 62969, 63587, 64171, 64621]
q_factors = [2, 130729, 35227, 44617, 66343, 67559, 67651, 67759, 67801, 68239, 71633, 73421, 74159, 74821, 77347, 78977, 79813, 82129, 82301, 82787, 84047, 87181, 87959, 88117, 88241, 89137, 89203, 90583, 91873, 92623, 93557, 93601, 94253, 94649, 95369, 97813, 97849, 98017, 99431, 100459, 101377, 101929, 103217, 103549, 106591, 106979, 111697, 112061, 112253, 112397, 114013, 116107, 116881, 117617, 118739, 119159, 119503, 120847, 121843, 121909, 124471, 126127, 126241]

#base, given in gen.py
g = 3

# Pohlig-Hellman in (p-1)/2
yp = y % p
xp = 0
xp_mod = 1

for order in p_factors[1:]: # to remove the 2
    print ("Pollard-Rho on P subgroup", order)
    # reduce the problem
    new_problem = power_mod(yp, (p-1)//order, p)
    # find a generator of that group
    new_generator = power_mod(g, (p-1)//order, p)
    # Pollard Rho
    new_problem = GF(p)(new_problem)
    new_generator = GF(p)(new_generator)
    new_xp = discrete_log_rho(new_problem, new_generator, order)
    
    print ("Discrete log: ", new_xp)
    xp = CRT(xp, new_xp, xp_mod, order)
    xp_mod *= order

# Pohlig-Hellman in (q-1)
yq = y % q
xq = 0
xq_mod = 1

for order in q_factors: # we need the 2
    print ("Pollard-Rho on Q subgroup", order)
    # reduce the problem
    new_problem = power_mod(yq, (q-1)//order, q)
    # find a generator of that grouq
    new_generator = power_mod(g, (q-1)//order, q)
    # Qollard Rho
    new_problem = GF(q)(new_problem)
    new_generator = GF(q)(new_generator)
    new_xq = discrete_log_rho(new_problem, new_generator, order)
    #
    print ("Discrete log: ", new_xq)
    xq = CRT(xq, new_xq, xq_mod, order)
    xq_mod *= order

# CRT
FLAG = CRT(xp, xq, xp_mod, xq_mod)

print ("\nChecking p and q ...", p * q == n)

print ("Found key:", FLAG)

#get real flag
dif = (p - 1) * (q - 1) // 4
while FLAG > 0:
    FLAG -= dif
    print("\nVerifying new flag ...", pow(3, FLAG, n) == y)
    try:
        print ("Success! Flag:", bytearray.fromhex(hex(FLAG)[2:]).decode())
        break
    except:
        print ("Failed.")
        continue

